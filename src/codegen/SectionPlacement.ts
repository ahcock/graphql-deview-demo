/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Layout from "./Layout";
import * as Placement from "./Placement";
import * as SectionDetail from "./SectionDetail";
export interface ISectionPlacement {
    layout?: Layout.Layout;
    placement?: Placement.Placement;
    sectionDetails?: Array<SectionDetail.ISectionDetail>;
}
export interface ISectionPlacementArgs {
    layout?: Layout.Layout;
    placement?: Placement.Placement;
    sectionDetails?: Array<SectionDetail.ISectionDetailArgs>;
}
export const SectionPlacementCodec: thrift.IStructCodec<ISectionPlacementArgs, ISectionPlacement> = {
    encode(args: ISectionPlacementArgs, output: thrift.TProtocol): void {
        const obj: any = {
            layout: args.layout,
            placement: args.placement,
            sectionDetails: args.sectionDetails
        };
        output.writeStructBegin("SectionPlacement");
        if (obj.layout != null) {
            output.writeFieldBegin("layout", thrift.TType.I32, 1);
            output.writeI32(obj.layout);
            output.writeFieldEnd();
        }
        if (obj.placement != null) {
            output.writeFieldBegin("placement", thrift.TType.I32, 2);
            output.writeI32(obj.placement);
            output.writeFieldEnd();
        }
        if (obj.sectionDetails != null) {
            output.writeFieldBegin("sectionDetails", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.STRUCT, obj.sectionDetails.length);
            obj.sectionDetails.forEach((value_1: SectionDetail.ISectionDetailArgs): void => {
                SectionDetail.SectionDetailCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ISectionPlacement {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: Layout.Layout = input.readI32();
                        _args.layout = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: Placement.Placement = input.readI32();
                        _args.placement = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_4: Array<SectionDetail.ISectionDetail> = new Array<SectionDetail.ISectionDetail>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: SectionDetail.ISectionDetail = SectionDetail.SectionDetailCodec.decode(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.sectionDetails = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            layout: _args.layout,
            placement: _args.placement,
            sectionDetails: _args.sectionDetails
        };
    }
};
export class SectionPlacement extends thrift.StructLike implements ISectionPlacement {
    public layout?: Layout.Layout;
    public placement?: Placement.Placement;
    public sectionDetails?: Array<SectionDetail.ISectionDetail>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ISectionPlacementArgs = {}) {
        super();
        if (args.layout != null) {
            const value_6: Layout.Layout = args.layout;
            this.layout = value_6;
        }
        if (args.placement != null) {
            const value_7: Placement.Placement = args.placement;
            this.placement = value_7;
        }
        if (args.sectionDetails != null) {
            const value_8: Array<SectionDetail.ISectionDetail> = new Array<SectionDetail.ISectionDetail>();
            args.sectionDetails.forEach((value_9: SectionDetail.ISectionDetailArgs): void => {
                const value_10: SectionDetail.ISectionDetail = new SectionDetail.SectionDetail(value_9);
                value_8.push(value_10);
            });
            this.sectionDetails = value_8;
        }
    }
    public static read(input: thrift.TProtocol): SectionPlacement {
        return new SectionPlacement(SectionPlacementCodec.decode(input));
    }
    public static write(args: ISectionPlacementArgs, output: thrift.TProtocol): void {
        return SectionPlacementCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return SectionPlacementCodec.encode(this, output);
    }
}
