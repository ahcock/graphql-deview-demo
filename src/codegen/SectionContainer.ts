/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as SectionComponentType from "./SectionComponentType";
import * as AvailableSection from "./AvailableSection";
export interface ISectionContainer {
    id?: string;
    sectionComponentType?: SectionComponentType.SectionComponentType;
    section?: AvailableSection.IAvailableSection;
}
export interface ISectionContainerArgs {
    id?: string;
    sectionComponentType?: SectionComponentType.SectionComponentType;
    section?: AvailableSection.IAvailableSectionArgs;
}
export const SectionContainerCodec: thrift.IStructCodec<ISectionContainerArgs, ISectionContainer> = {
    encode(args: ISectionContainerArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: args.id,
            sectionComponentType: args.sectionComponentType,
            section: args.section
        };
        output.writeStructBegin("SectionContainer");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        if (obj.sectionComponentType != null) {
            output.writeFieldBegin("sectionComponentType", thrift.TType.I32, 2);
            output.writeI32(obj.sectionComponentType);
            output.writeFieldEnd();
        }
        if (obj.section != null) {
            output.writeFieldBegin("section", thrift.TType.STRUCT, 3);
            AvailableSection.AvailableSectionCodec.encode(obj.section, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ISectionContainer {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: SectionComponentType.SectionComponentType = input.readI32();
                        _args.sectionComponentType = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_3: AvailableSection.IAvailableSection = AvailableSection.AvailableSectionCodec.decode(input);
                        _args.section = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            id: _args.id,
            sectionComponentType: _args.sectionComponentType,
            section: _args.section
        };
    }
};
export class SectionContainer extends thrift.StructLike implements ISectionContainer {
    public id?: string;
    public sectionComponentType?: SectionComponentType.SectionComponentType;
    public section?: AvailableSection.IAvailableSection;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ISectionContainerArgs = {}) {
        super();
        if (args.id != null) {
            const value_4: string = args.id;
            this.id = value_4;
        }
        if (args.sectionComponentType != null) {
            const value_5: SectionComponentType.SectionComponentType = args.sectionComponentType;
            this.sectionComponentType = value_5;
        }
        if (args.section != null) {
            const value_6: AvailableSection.IAvailableSection = new AvailableSection.AvailableSection(args.section);
            this.section = value_6;
        }
    }
    public static read(input: thrift.TProtocol): SectionContainer {
        return new SectionContainer(SectionContainerCodec.decode(input));
    }
    public static write(args: ISectionContainerArgs, output: thrift.TProtocol): void {
        return SectionContainerCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return SectionContainerCodec.encode(this, output);
    }
}
