/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as SectionPlacement from "./SectionPlacement";
export interface IScreenContainer {
    id?: string;
    name?: string;
    sectionPlacements?: Set<SectionPlacement.ISectionPlacement>;
}
export interface IScreenContainerArgs {
    id?: string;
    name?: string;
    sectionPlacements?: Set<SectionPlacement.ISectionPlacementArgs>;
}
export const ScreenContainerCodec: thrift.IStructCodec<IScreenContainerArgs, IScreenContainer> = {
    encode(args: IScreenContainerArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: args.id,
            name: args.name,
            sectionPlacements: args.sectionPlacements
        };
        output.writeStructBegin("ScreenContainer");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 2);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        if (obj.sectionPlacements != null) {
            output.writeFieldBegin("sectionPlacements", thrift.TType.SET, 3);
            output.writeSetBegin(thrift.TType.STRUCT, obj.sectionPlacements.size);
            obj.sectionPlacements.forEach((value_1: SectionPlacement.ISectionPlacementArgs): void => {
                SectionPlacement.SectionPlacementCodec.encode(value_1, output);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IScreenContainer {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.SET) {
                        const value_4: Set<SectionPlacement.ISectionPlacement> = new Set<SectionPlacement.ISectionPlacement>();
                        const metadata_1: thrift.IThriftSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: SectionPlacement.ISectionPlacement = SectionPlacement.SectionPlacementCodec.decode(input);
                            value_4.add(value_5);
                        }
                        input.readSetEnd();
                        _args.sectionPlacements = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            id: _args.id,
            name: _args.name,
            sectionPlacements: _args.sectionPlacements
        };
    }
};
export class ScreenContainer extends thrift.StructLike implements IScreenContainer {
    public id?: string;
    public name?: string;
    public sectionPlacements?: Set<SectionPlacement.ISectionPlacement>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IScreenContainerArgs = {}) {
        super();
        if (args.id != null) {
            const value_6: string = args.id;
            this.id = value_6;
        }
        if (args.name != null) {
            const value_7: string = args.name;
            this.name = value_7;
        }
        if (args.sectionPlacements != null) {
            const value_8: Set<SectionPlacement.ISectionPlacement> = new Set<SectionPlacement.ISectionPlacement>();
            args.sectionPlacements.forEach((value_9: SectionPlacement.ISectionPlacementArgs): void => {
                const value_10: SectionPlacement.ISectionPlacement = new SectionPlacement.SectionPlacement(value_9);
                value_8.add(value_10);
            });
            this.sectionPlacements = value_8;
        }
    }
    public static read(input: thrift.TProtocol): ScreenContainer {
        return new ScreenContainer(ScreenContainerCodec.decode(input));
    }
    public static write(args: IScreenContainerArgs, output: thrift.TProtocol): void {
        return ScreenContainerCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ScreenContainerCodec.encode(this, output);
    }
}
